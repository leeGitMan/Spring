<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	
	<!--  mapper 파일 생성 시 반드시 해야되는 것!
		1. cache-ref 태그 삭제
		2. mapper 태그에 namespace 속성 추가
			-> namespace : 해당 파일을 쉽게 부르는 이름(DAO에서 사용)
	
	 -->
	 
	 <!-- 수행하려는 SQL에 따라서 태그가 구분됨 (사용 가능한 속성도 다름)
		 	<select></select>
		 	<insert></insert>
		  	<update></update>
			<delete></delete>
	  -->
	  
	  
	  <!-- resultMap 태그
	  	
	  		- SELECT 조회 결과(ResultSet)의 컬럼과
	  		조회 결과를 옮겨 담을 VO의 필드명이 일치하지 않을 때
	  		이를 매핑시켜 조회결과가 필드에 세팅되게 하는 역할
	  
	  		
	  		[resultMap 속성]
	  		1) type : 조회 결과를 담을 VO의 타입 또는 별칭
	  		2) id   : 만들어진 resultMap 태그를 지칭할 이름(식별명)
	  
	  		
	  		[resultMap 내부 작성 태그]
	  		<id>     :  PK 역할의 컬럼  -  필드 연결
	  		<result> :  PK을 제외한 나머지 컬럼  -  필드 연결
	  
	   -->
	  	
	  <resultMap type="member" id="member_rm">
	  	
	  	<id property="memberNo" column="MEMBER_NO"/>
		
		<result property="memberEmail" 		column="MEMBER_EMAIL"/>
		<result property="memberPw" 		column="MEMBER_PW"/>
		<result property="memberNickname" 	column="MEMBER_NICK"/>
		<result property="memberTel" 		column="MEMBER_TEL"/>
		<result property="memberAddress" 	column="MEMBER_ADDR"/>
		<result property="profileImage" 	column="PROFILE_IMG"/>
		<result property="enrollDate" 		column="ENROLL_DT"/>
		<result property="secessionFlag" 	column="SECESSION_FL"/>
	  	
	  </resultMap>
	  
	  <!--  1. select 태그 속성
	  	1) resultType : 조회 결과가 1행 1열인 경우에만 작성
	  					조회된 데이터의 Java 자료형을 Mybatis 별칭 형태로 작성
	  
	  		[mybatis 별칭]
	  		java       :       mybatis
	  		
	  		int		   : 		_int
	  		Interger   : 		int
	  		String     :      string  (java.lang.String)
	  
	   -->
	  
	  
	  <!-- 조회되는 행의 개수 : 1행 / 조회되는 데이터의 타입 : int형 -->
	  <select id="test1" resultType="_int">
	  	SELECT COUNT(*) FROM MEMBER
	  </select>
	  
	  
	  <!-- (중요)
	  		마이바티스에서 #{},  ${}  차이점
	  		
	  		#{변수명} : SQL에 값이 포함될 때 양쪽에 '' 추가됨   (pstmt)
	  					-> 리터럴 사용 (값 자체로 사용) 
	  
	  		${변수명} : SQL에 값이 포함될 때 양쪽에 '' 추가되지 않음 (stmt)
	  					-> SQL 구문 조합 시 사용 (condition)
	  
	   -->
	  
	  <!-- 조회되는 행의 개수 : 1행 / 파라미터 타입 : String / 조회되는 타입 : String -->
	  <select id="test2" parameterType="string" resultType="string">
		SELECT MEMBER_NICK FROM MEMBER
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND SECESSION_FL = 'N'
	  </select>
	  
	  
	  <!-- 
	  	조회되는 행의 개수 : 1행
	  	파라미터 타입 : edu.kh.comm.memeber.model.vo.Member
	  	조회되는 타입 : java.lang.String ->  string
	  
	 	파라미터로 VO가 전달된 경우
	 	1) 패키지명 + 클래스명을 모두 작성해야 한다.
	 	2) mapper에서 VO에 저장된 값을 얻어와 사용할 경우 #{필드명} 을 사용한다.
	 		단, VO에 반드시 Getter가 작성되어 있어야 한다.
	   -->
	  <!-- <select id="test3" parameterType="edu.kh.comm.member.model.vo.Member" resultType="string">  -->
	  <select id="test3" parameterType="member" resultType="string">
	  	SELECT MEMBER_TEL FROM MEMBER_S
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND MEMBER_PW = #{memberPw}
		AND SECESSION_FL = 'N'
	  </select>
	  
	  
	  <!-- 로그인 -->
	  <!-- 
	  	조회되는 행의 개수 : 1행
	  	파라미터 타입 : edu.kh.comm.member.model.vo.Member  -> member(사용자 정의)
	  	조회되는 타입 : edu.kh.comm.member.model.vo.Member  -> member(사용자 정의)
	  	
	  	* resultType에 VO를 작성하는 경우 *
	  		- VO의 필드명과 조회되는 컬럼명이 일치하면
	  		자동으로 VO객체에 값이 세팅된다.
	  		
	  		-> 하지만 java와 DB의 표기법 차이로 인해서
	  			위 특징이 적용되는 경우가 많지 않다...ㅠㅠ..
	  			
	  		그래서 필드명, 컬럼명이 달라도 이를 연결시켜줄 수 있는
	  		<resultMap> 태그를 제공함!
	  		
	  		memberNo    -    MEMBER_NO
	  	
	  		resultMap="member_rm" -> 조회 결과를 member_rm을 이용하여 비교해서 VO에 세팅
	   -->
	   
	   <select id="login" parameterType="member" resultMap="member_rm">
	   		SELECT MEMBER_NO,MEMBER_EMAIL,MEMBER_NICK ,MEMBER_TEL,
			    MEMBER_ADDR, PROFILE_IMG, 
			    TO_CHAR( ENROLL_DT, 'YYYY-MM-DD HH24:MI:SS') AS ENROLL_DT
			FROM MEMBER_S
			WHERE MEMBER_EMAIL = #{memberEmail}
			AND MEMBER_PW = #{memberPw}
			AND SECESSION_FL = 'N'
	   </select>
	  
	  
	  
</mapper>
