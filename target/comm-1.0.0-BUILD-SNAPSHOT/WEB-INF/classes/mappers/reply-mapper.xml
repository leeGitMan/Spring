<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="replyMapper">

	<!-- me 
	<resultMap type="reply" id="reply_rm">
		<id property="replyNo" column="REPLY_NO"/>
		<result property="replyContent" column="REPLY_CONTENT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="memberNickname" column="MEMBER_NICK"/>
		<result property="parentReplyNo" column="PARENT_REPLY_NO"/>
	</resultMap> -->
	
	<resultMap type="reply" id="reply_rm">
	
		<id property="replyNo" column="REPLY_NO"/>
		
		<result property="replyContent" column="REPLY_CONTENT"/>
		<result property="createDate" column="CREATE_DT"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="memberNickname" column="MEMBER_NICK"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		<result property="parentReplyNo" column="PARENT_REPLY_NO"/>	
	</resultMap>

	
	
	<!-- 댓글 목록 조회(계층형 구조) -->
	<!-- 
		계층형 쿼리( START WITH, CONNECT BY, ORDER SIBLINGS BY )
		- 상위 타입과 하위 타입간의 관계를 계층식으로 표현할 수 있게 하는 질의어(select 문)
		
		- START WITH : 상위 타입(최상위 부모)으로 사용될 행을 지정
		- CONNECT BY : 상위 타입과 하위 타입 사이의 관계를 규정, 
						PRIOR(이전의) 연산자와 같이 사용하여, 현재 행 이전에 상위 타입 or 하위 타입이
						있을지 규정
		1) 부모 -> 자식 계층구조				
		CONNECT BY PRIOR 자식 컬럼 = 부모 컬럼
		
		2) 자식 -> 부모 계층구조
		CONNECT BY PRIOR 부모 컬럼 = 자식 컬럼
		
		- ORDER SIBLINGS BY : 계층 구조 정렬
		
		** 계층형 쿼리가 적용도니 SELECT 해석 순서 **
		
		5:	SELECT
		1:	FROM 
		4:	WHERE
		2:	START WITH
		3:	CONNECT BY
		6:	ORDER SIBLINGS BY
		
		- WHERE 절이 계층형 쿼리보다 해석 순서가 늦기 때문에
		먼저 조건을 반영하고 싶은 경우 FROM절 서브쿼리(인라인 뷰)를 이용
	 -->
	 
	<select id="selectReplyList" resultMap="reply_rm">
		SELECT LEVEL,  R.* FROM
		    (SELECT REPLY_NO, REPLY_CONTENT,
		        TO_CHAR(CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') CREATE_DT,
		        BOARD_NO, MEMBER_NO, MEMBER_NICK, PROFILE_IMG, PARENT_REPLY_NO, REPLY_ST
		    FROM REPLY_S
		    JOIN MEMBER_S USING(MEMBER_NO)
		    WHERE BOARD_NO = #{boardNo}) R
		    
		WHERE REPLY_ST = 'N'
		START WITH PARENT_REPLY_NO IS NULL
		CONNECT BY PRIOR REPLY_NO = PARENT_REPLY_NO
		ORDER SIBLINGS BY REPLY_NO
	</select>
	
	<!-- 댓글 등록 -->
	<!-- me 
	<insert id="insertReply">
		INSERT INTO REPLY_S VALUES(SEQ_REPLY_NO_S.NEXTVAL, #{replyContent}, DEFAULT, DEFAULT, 
									${memberNo}, ${boardNo},
									<if test="parentReplyNo != -1">
									${parentReplyNo})
									</if>
									<if test="parentReplyNo == -1">
									NULL)
									</if>
	</insert> -->
	
	<!-- 댓글 등록 -->
	<insert id="insertReply">
		INSERT INTO REPLY_S VALUES(
			SEQ_REPLY_NO_S.NEXTVAL, #{replyContent}, DEFAULT, DEFAULT, #{memberNo}, #{boardNo},
			<!-- 일반 댓글인 경우-->
			<if test="parentReplyNo == 0">
				NULL
			</if>
			<!-- 답글인 경우 -->
			<if test="parentReplyNo != 0">
				#{parentReplyNo}
			</if>
		)
	</insert>
	
	
	<!-- 댓글 수정 -->
	<update id="updateReply" parameterType="reply">
		UPDATE REPLY_S SET REPLY_CONTENT = #{replyContent}
		WHERE REPLY_NO = ${replyNo}
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteReply">
		UPDATE REPLY_S SET REPLY_ST = 'Y'
		WHERE REPLY_NO = ${replyNo}
	</update>
	
	
	
</mapper>
